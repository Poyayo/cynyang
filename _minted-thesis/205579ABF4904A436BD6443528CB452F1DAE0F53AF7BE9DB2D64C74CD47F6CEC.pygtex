\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+cm}{/* 时钟的中断处理函数 */}
\PYG{k}{static}\PYG{+w}{ }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{intr\PYGZus{}timer\PYGZus{}handler}\PYG{p}{(}\PYG{k+kt}{void}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{   }\PYG{k}{struct}\PYG{+w}{ }\PYG{n+nc}{task\PYGZus{}struct}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{cur\PYGZus{}thread}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{running\PYGZus{}thread}\PYG{p}{();}

\PYG{+w}{   }\PYG{n}{ASSERT}\PYG{p}{(}\PYG{n}{cur\PYGZus{}thread}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{stack\PYGZus{}magic}\PYG{+w}{ }\PYG{o}{==}\PYG{+w}{ }\PYG{l+m+mh}{0x19870916}\PYG{p}{);}\PYG{+w}{         }\PYG{c+c1}{// 检查栈是否溢出}

\PYG{+w}{   }\PYG{n}{cur\PYGZus{}thread}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{elapsed\PYGZus{}ticks}\PYG{o}{++}\PYG{p}{;}\PYG{+w}{	  }\PYG{c+c1}{// 记录此线程占用的cpu时间嘀}
\PYG{+w}{   }\PYG{n}{ticks}\PYG{o}{++}\PYG{p}{;}\PYG{+w}{	  }\PYG{c+c1}{//从内核第一次处理时间中断后开始至今的滴哒数,内核态和用户态总共的嘀哒数}

\PYG{+w}{   }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{cur\PYGZus{}thread}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{ticks}\PYG{+w}{ }\PYG{o}{==}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}\PYG{+w}{	  }\PYG{c+c1}{// 若进程时间片用完就开始调度新的进程上cpu}
\PYG{+w}{      }\PYG{n}{schedule}\PYG{p}{();}\PYG{+w}{ }
\PYG{+w}{   }\PYG{p}{\PYGZcb{}}\PYG{+w}{ }\PYG{k}{else}\PYG{+w}{ }\PYG{p}{\PYGZob{}}\PYG{+w}{				  }\PYG{c+c1}{// 将当前进程的时间片\PYGZhy{}1}
\PYG{+w}{      }\PYG{n}{cur\PYGZus{}thread}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{ticks}\PYG{o}{\PYGZhy{}\PYGZhy{}}\PYG{p}{;}
\PYG{+w}{   }\PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}

\PYG{c+cm}{/* 实现任务调度 */}
\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{schedule}\PYG{p}{()}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{   }\PYG{n}{ASSERT}\PYG{p}{(}\PYG{n}{intr\PYGZus{}get\PYGZus{}status}\PYG{p}{()}\PYG{+w}{ }\PYG{o}{==}\PYG{+w}{ }\PYG{n}{INTR\PYGZus{}OFF}\PYG{p}{);}

\PYG{+w}{   }\PYG{k}{struct}\PYG{+w}{ }\PYG{n+nc}{task\PYGZus{}struct}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{cur}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{running\PYGZus{}thread}\PYG{p}{();}\PYG{+w}{ }
\PYG{+w}{   }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{cur}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{status}\PYG{+w}{ }\PYG{o}{==}\PYG{+w}{ }\PYG{n}{TASK\PYGZus{}RUNNING}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}\PYG{+w}{ }\PYG{c+c1}{// 若此线程只是cpu时间片到了,将其加入到就绪队列尾}
\PYG{+w}{      }\PYG{n}{ASSERT}\PYG{p}{(}\PYG{o}{!}\PYG{n}{elem\PYGZus{}find}\PYG{p}{(}\PYG{o}{\PYGZam{}}\PYG{n}{thread\PYGZus{}ready\PYGZus{}list}\PYG{p}{,}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{n}{cur}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{general\PYGZus{}tag}\PYG{p}{));}
\PYG{+w}{      }\PYG{n}{list\PYGZus{}append}\PYG{p}{(}\PYG{o}{\PYGZam{}}\PYG{n}{thread\PYGZus{}ready\PYGZus{}list}\PYG{p}{,}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{n}{cur}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{general\PYGZus{}tag}\PYG{p}{);}
\PYG{+w}{      }\PYG{n}{cur}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{ticks}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{cur}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{priority}\PYG{p}{;}\PYG{+w}{     }\PYG{c+c1}{// 重新将当前线程的ticks再重置为其priority;}
\PYG{+w}{      }\PYG{n}{cur}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{status}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{TASK\PYGZus{}READY}\PYG{p}{;}
\PYG{+w}{   }\PYG{p}{\PYGZcb{}}\PYG{+w}{ }\PYG{k}{else}\PYG{+w}{ }\PYG{p}{\PYGZob{}}\PYG{+w}{ }
\PYG{+w}{      }\PYG{c+cm}{/* 若此线程需要某事件发生后才能继续上cpu运行,}
\PYG{c+cm}{      不需要将其加入队列,因为当前线程不在就绪队列中。*/}
\PYG{+w}{   }\PYG{p}{\PYGZcb{}}

\PYG{+w}{   }\PYG{c+cm}{/* 如果就绪队列中没有可运行的任务,就唤醒idle */}
\PYG{+w}{   }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{list\PYGZus{}empty}\PYG{p}{(}\PYG{o}{\PYGZam{}}\PYG{n}{thread\PYGZus{}ready\PYGZus{}list}\PYG{p}{))}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{      }\PYG{n}{thread\PYGZus{}unblock}\PYG{p}{(}\PYG{n}{idle\PYGZus{}thread}\PYG{p}{);}
\PYG{+w}{   }\PYG{p}{\PYGZcb{}}

\PYG{+w}{   }\PYG{n}{ASSERT}\PYG{p}{(}\PYG{o}{!}\PYG{n}{list\PYGZus{}empty}\PYG{p}{(}\PYG{o}{\PYGZam{}}\PYG{n}{thread\PYGZus{}ready\PYGZus{}list}\PYG{p}{));}
\PYG{+w}{   }\PYG{n}{thread\PYGZus{}tag}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n+nb}{NULL}\PYG{p}{;}\PYG{+w}{	  }\PYG{c+c1}{// thread\PYGZus{}tag清空}
\PYG{c+cm}{/* 将thread\PYGZus{}ready\PYGZus{}list队列中的第一个就绪线程弹出,准备将其调度上cpu. */}
\PYG{+w}{   }\PYG{n}{thread\PYGZus{}tag}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{list\PYGZus{}pop}\PYG{p}{(}\PYG{o}{\PYGZam{}}\PYG{n}{thread\PYGZus{}ready\PYGZus{}list}\PYG{p}{);}\PYG{+w}{   }
\PYG{+w}{   }\PYG{k}{struct}\PYG{+w}{ }\PYG{n+nc}{task\PYGZus{}struct}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{next}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{elem2entry}\PYG{p}{(}\PYG{k}{struct}\PYG{+w}{ }\PYG{n+nc}{task\PYGZus{}struct}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{general\PYGZus{}tag}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{thread\PYGZus{}tag}\PYG{p}{);}
\PYG{+w}{   }\PYG{n}{next}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{status}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{TASK\PYGZus{}RUNNING}\PYG{p}{;}

\PYG{+w}{   }\PYG{c+cm}{/* 击活任务页表等 */}
\PYG{+w}{   }\PYG{n}{process\PYGZus{}activate}\PYG{p}{(}\PYG{n}{next}\PYG{p}{);}

\PYG{+w}{   }\PYG{n}{switch\PYGZus{}to}\PYG{p}{(}\PYG{n}{cur}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{next}\PYG{p}{);}
\PYG{p}{\PYGZcb{}}

\end{Verbatim}
